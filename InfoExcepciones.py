Crea tus propias excepciones en Python


En una entrega anterior, que te estar칠 dejando aqu칤, hablamos acerca de las excepciones en Python y sobre como manejarlas. Si recordamos utilizamos 4 nuevos bloques. 游냀

try
except
else
finally
Todo esto funciono bastante bien, y trabajamos con excepciones que el lenguaje ya posee. As칤 que, para esta segunda entrega, aprenderemos a crear nuestras propias excepciones. Excepciones custome que podremos definir para errores muy particulares.

Bien, sin m치s dilaci칩n comencemos con el post.

Excepciones propias. 游븷
Como mencionamos anteriormente todas las excepciones heredan de la clase padre Exception, por lo cual, para poder crear nuestra propia excepci칩n debemos hacer exactamente los mismo. Crearemos una clase que herede de Exception.

class EmptyListError(Exception):
    pass
Para este ejemplo he creado el error EmptyList, un error que pretende lanzar siempre que nos encontremos con una listas vac칤a.

Pongamos a prueba nuestras excepci칩n.

class EmptyListError(Exception):
    pass

def average(numbers):
    if not numbers:
        raise EmptyListError()

    return sum(numbers) / len(numbers) 
Para este nuevo ejemplo he defino la funci칩n average, que valida que el par치metro no sea una lista vac칤a. En caso lo fuera, entonces una excepci칩n de tipo EmptyListError es lanzada. Para ello utilizamos la palabra reservada raise, simplemente lanza la excepci칩n.

Si llamamos a la funci칩n con una lista vac칤a veremos nuestro error en consola.

>>> average([])

Traceback (most recent call last):
  File "main.py", line 11, in <module>
    average([])
  File "main.py", line 6, in average
    raise EmptyListError()
__main__.EmptyListError
Si bien el error es producido, no vemos mucha informaci칩n acerca de 칠l. Por lo tanto vamos hacer un refactor a nuestra clase error. 游냍

class EmptyListError(Exception):
    """Exception raised for empty lists

    Attributes:
        message
    """

    def __init__(self, message="Lo sentimos, la lista no puede estar vac칤a."):
        self.message = message

        super().__init__(self.message)
Ahora definimos el m칠todo init para poder establecer un mensaje de error. Si el mensaje no es dado al instanciar el de tipo EmptyListError, por default ser치: Lo sentimos, la lista no puede estar vac칤a.. Con esto le damos mucho m치s contexto al usuario de lo que esta pasando y el motivo del error.

Si ejecutamos nuevamente obtendremos el mensaje en consola.

Traceback (most recent call last):
  File "main.py", line 21, in <module>
    average([])
  File "main.py", line 16, in average
    raise EmptyListError()
__main__.EmptyListError: Lo sentimos, la lista no puede estar vac칤a.
Podemos cambiar el mensaje en la instancia del error. 游땻

raise EmptyListError('La lista se encuentra vac칤a')
Perfecto.

Manejar errores propios 游붍
Al igual que con las excepciones que Python nos ofrece, las excepciones propias pueden ser manejadas con los bloques de try y except. Veamos un ejemplo.

try:
    promedio = average([])

except EmptyListError as err:
    print(err)

else:
    print('El promedio es:', promedio)
SI ejecutamos ahora visualizaremos en consola 칰nicamente el mensaje de error.

Lo sentimos, la lista no puede estar vac칤a.
M치s informaci칩n en el error
Como hemos aprendido hasta ahora los errores podemos crearlos mediante clases, por lo tanto, al momento de instancias un nuevo error, es posible pasar la N cantidad de argumentos que deseemos, lo cual permite que nuestro error se construya con mucha m치s informaci칩n.

Por ejemplo, creemos un error de Rango.

class RangoError(Exception):
    """Exception raised for rango number.

    Attributes:
        message
    """

    def __init__(self, number, message="Lo sentimos, el n칰mero se encuentra fuera de rango."):
        self.number = number
        self.message = message

        super().__init__(self.message)

    def __str__(self):
        return f'Number: {self.number} - {self.message}'
Para este nuevo error hemos definido el par치metro number, que permitir치 conocer que n칰mero no se encuentra fuera del rango establecido. As칤 mismo hemos sobre escrito el m칠todo str para enriquecer aun m치s el mensaje de error.

En la instancia es posible pasar el n칰mero que no cumpla con el rango.

number = 10
if number > 0 and number < 215:
    raise RangoError(number)
Si ejecutamos encontraremos el mensaje mucho m치s personalizado.

Number: 10 - Lo sentimos, el n칰mero se encuentra fuera de rango.
Letras finales
Perfecto, ahora, con estos 2 post de Pywombat, t칰 ya puedes validar y crear tus propias excepciones en Python. Recuerda que las excepciones son necesarias para que un programa valide la mayor cantidad de casos de errores posibles.

No se trata de evitar los errores, si no aprender a lidiar con ellos. 游꽅